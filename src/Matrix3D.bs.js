// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Float = require("./Float.bs.js");
var Matrix2D = require("./Matrix2D.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function makeUninitializedUnsafe(param) {
  var matrix = new Array(3);
  matrix[0] = new Array(3);
  matrix[1] = new Array(3);
  matrix[2] = new Array(3);
  return matrix;
}

function getUnsafe(t, row, col) {
  return t[row][col];
}

function setUnsafe(t, x, row, col) {
  t[row][col] = x;
  return /* () */0;
}

var identityMatrix = /* array */[
  /* array */[
    1,
    0,
    0
  ],
  /* array */[
    0,
    1,
    0
  ],
  /* array */[
    0,
    0,
    1
  ]
];

function equals(matrix1, matrix2) {
  var _i = 0;
  var _j = 0;
  while(true) {
    var j = _j;
    var i = _i;
    if (i > 2) {
      return true;
    } else {
      var x = getUnsafe(matrix1, i, j);
      var y = getUnsafe(matrix2, i, j);
      if (Float.equals(x, y)) {
        if (j < 2) {
          _j = j + 1 | 0;
          continue ;
        } else {
          _j = 0;
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        return false;
      }
    }
  };
}

function multiply(m1, m2) {
  var m3 = makeUninitializedUnsafe(/* () */0);
  for(var row = 0; row <= 2; ++row){
    for(var col = 0; col <= 2; ++col){
      setUnsafe(m3, getUnsafe(m1, row, 0) * getUnsafe(m2, 0, col) + getUnsafe(m1, row, 1) * getUnsafe(m2, 1, col) + getUnsafe(m1, row, 2) * getUnsafe(m2, 2, col), row, col);
    }
  }
  return m3;
}

function transpose(matrix) {
  var transposed = makeUninitializedUnsafe(/* () */0);
  for(var i = 0; i <= 2; ++i){
    for(var j = 0; j <= 2; ++j){
      setUnsafe(transposed, getUnsafe(matrix, i, j), j, i);
    }
  }
  return transposed;
}

function submatrix(matrix, row, col) {
  var subMatrix = Matrix2D.makeUninitializedUnsafe(/* () */0);
  for(var i = 0; i <= 2; ++i){
    for(var j = 0; j <= 2; ++j){
      if (!(i === row || j === col)) {
        var element = getUnsafe(matrix, i, j);
        var rowIx = i >= row ? i - 1 | 0 : i;
        var colIx = j >= col ? j - 1 | 0 : j;
        setUnsafe(subMatrix, element, rowIx, colIx);
      }
      
    }
  }
  return subMatrix;
}

function minor(matrix, row, col) {
  return Matrix2D.determinant(submatrix(matrix, row, col));
}

function cofactor(matrix, row, col) {
  var m = minor(matrix, row, col);
  if ((row + col | 0) % 2 === 0) {
    return m;
  } else {
    return -1 * m;
  }
}

function determinant(matrix) {
  var a = getUnsafe(matrix, 0, 0);
  var b = getUnsafe(matrix, 0, 1);
  var c = getUnsafe(matrix, 0, 2);
  return a * cofactor(matrix, 0, 0) + b * cofactor(matrix, 0, 1) + c * cofactor(matrix, 0, 2);
}

var m = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    5.5,
    6.5,
    7.5
  ],
  /* array */[
    9,
    10,
    11
  ]
];

if (!Float.equals(getUnsafe(m, 0, 0), 1)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          109,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 0, 2), 3)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          110,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 1, 0), 5.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          111,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 1, 2), 7.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          112,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 2, 2), 11)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          113,
          2
        ]
      ];
}

var m1 = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    5,
    6,
    7
  ],
  /* array */[
    9,
    8,
    7
  ]
];

var m2 = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    5,
    6,
    7
  ],
  /* array */[
    9,
    8,
    7
  ]
];

if (!equals(m1, m2)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          121,
          2
        ]
      ];
}

var m1$1 = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    5,
    6,
    7
  ],
  /* array */[
    9,
    8,
    7
  ]
];

var m2$1 = /* array */[
  /* array */[
    9,
    2,
    3
  ],
  /* array */[
    8,
    6,
    7
  ],
  /* array */[
    9,
    8,
    7
  ]
];

if (equals(m1$1, m2$1)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          129,
          2
        ]
      ];
}

var m1$2 = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    3,
    2,
    1
  ],
  /* array */[
    2,
    4,
    6
  ]
];

var m2$2 = /* array */[
  /* array */[
    2,
    4,
    6
  ],
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    3,
    2,
    1
  ]
];

var m3 = /* array */[
  /* array */[
    13,
    14,
    15
  ],
  /* array */[
    11,
    18,
    25
  ],
  /* array */[
    26,
    28,
    30
  ]
];

if (!equals(multiply(m1$2, m2$2), m3)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          139,
          2
        ]
      ];
}

if (!equals(multiply(m1$2, identityMatrix), m1$2)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          142,
          2
        ]
      ];
}

if (!equals(multiply(m2$2, identityMatrix), m2$2)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          143,
          2
        ]
      ];
}

if (!equals(multiply(m3, identityMatrix), m3)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          144,
          2
        ]
      ];
}

if (!equals(multiply(identityMatrix, identityMatrix), identityMatrix)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          145,
          2
        ]
      ];
}

var matrix = /* array */[
  /* array */[
    1,
    2,
    3
  ],
  /* array */[
    3,
    2,
    1
  ],
  /* array */[
    2,
    4,
    6
  ]
];

var transposed = /* array */[
  /* array */[
    1,
    3,
    2
  ],
  /* array */[
    2,
    2,
    4
  ],
  /* array */[
    3,
    1,
    6
  ]
];

if (!equals(transpose(matrix), transposed)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          152,
          2
        ]
      ];
}

if (!equals(transpose(identityMatrix), identityMatrix)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          153,
          2
        ]
      ];
}

var matrix$1 = /* array */[
  /* array */[
    1,
    5,
    0
  ],
  /* array */[
    -3,
    2,
    7
  ],
  /* array */[
    0,
    6,
    -3
  ]
];

var subMatrix = /* array */[
  /* array */[
    -3,
    2
  ],
  /* array */[
    0,
    6
  ]
];

if (!Matrix2D.equals(submatrix(matrix$1, 0, 2), subMatrix)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          162,
          2
        ]
      ];
}

var a = /* array */[
  /* array */[
    3,
    5,
    0
  ],
  /* array */[
    2,
    -1,
    -7
  ],
  /* array */[
    6,
    -1,
    5
  ]
];

var b = submatrix(a, 1, 0);

if (!Float.equals(Matrix2D.determinant(b), minor(a, 1, 0))) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          171,
          2
        ]
      ];
}

var a$1 = /* array */[
  /* array */[
    3,
    5,
    0
  ],
  /* array */[
    2,
    -1,
    -7
  ],
  /* array */[
    6,
    -1,
    5
  ]
];

if (!Float.equals(minor(a$1, 0, 0), -12)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          178,
          2
        ]
      ];
}

if (!Float.equals(cofactor(a$1, 0, 0), -12)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          179,
          2
        ]
      ];
}

if (!Float.equals(minor(a$1, 1, 0), 25)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          181,
          2
        ]
      ];
}

if (!Float.equals(cofactor(a$1, 1, 0), -25)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          183,
          2
        ]
      ];
}

var m$1 = /* array */[
  /* array */[
    1,
    2,
    6
  ],
  /* array */[
    -5,
    8,
    -4
  ],
  /* array */[
    2,
    6,
    4
  ]
];

if (!Float.equals(cofactor(m$1, 0, 0), 56)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          190,
          2
        ]
      ];
}

if (!Float.equals(cofactor(m$1, 0, 1), 12)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          191,
          2
        ]
      ];
}

if (!Float.equals(cofactor(m$1, 0, 2), -46)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          192,
          2
        ]
      ];
}

if (!Float.equals(determinant(m$1), -196)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix3D.ml",
          193,
          2
        ]
      ];
}

exports.makeUninitializedUnsafe = makeUninitializedUnsafe;
exports.getUnsafe = getUnsafe;
exports.setUnsafe = setUnsafe;
exports.identityMatrix = identityMatrix;
exports.equals = equals;
exports.multiply = multiply;
exports.transpose = transpose;
exports.submatrix = submatrix;
exports.minor = minor;
exports.cofactor = cofactor;
exports.determinant = determinant;
/*  Not a pure module */
