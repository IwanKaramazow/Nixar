// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Color = require("./Color.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make(width, height) {
  var pixelArray = new Array(height);
  for(var y = 0 ,y_finish = height - 1 | 0; y <= y_finish; ++y){
    var row = /* array */[];
    for(var x = 0 ,x_finish = width - 1 | 0; x <= x_finish; ++x){
      row[x] = Color.make(0, 0, 0);
    }
    pixelArray[y] = row;
  }
  return {
          width: width,
          height: height,
          pixels: pixelArray
        };
}

function writePixel(t, x, y, color) {
  t.pixels[y][x] = color;
  return /* () */0;
}

function pixelAt(t, x, y) {
  return t.pixels[y][x];
}

function toPpm(t) {
  var line1 = String(t.width) + " " + String(t.height) + "\n";
  var header = "P3\n" + line1 + "255\n";
  var pixelData = "";
  for(var y = 0 ,y_finish = t.height - 1 | 0; y <= y_finish; ++y){
    var row = t.pixels[y];
    for(var x = 0 ,x_finish = t.width - 1 | 0; x <= x_finish; ++x){
      var pixel = row[x];
      pixelData = pixelData + Color.toPpmString(pixel, 255) + " ";
    }
    pixelData = pixelData + "\n";
  }
  return header + pixelData;
}

function writeToFile(canvas) {
  var data = toPpm(canvas);
  Fs.writeFileSync("canvas.ppm", data, "utf8");
  return /* () */0;
}

var c = make(10, 20);

if (c.width !== 10) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          59,
          2
        ]
      ];
}

if (c.height !== 20) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          60,
          2
        ]
      ];
}

if (c.pixels.length !== 20) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          61,
          2
        ]
      ];
}

if (c.pixels[0].length !== 10) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          62,
          2
        ]
      ];
}

for(var x = 0; x <= 9; ++x){
  for(var y = 0; y <= 19; ++y){
    if (!Color.equals(pixelAt(c, x, y), Color.make(0, 0, 0))) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "Canvas.ml",
              66,
              6
            ]
          ];
    }
    
  }
}

var canvas = make(10, 20);

var red = Color.make(1, 0, 0);

writePixel(canvas, 2, 3, red);

if (!Color.equals(pixelAt(canvas, 2, 3), red)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          78,
          2
        ]
      ];
}

var canvas$1 = make(5, 3);

var ppm = toPpm(canvas$1);

var lines = ppm.split("\n");

if (lines[0] !== "P3") {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          89,
          2
        ]
      ];
}

if (lines[1] !== "5 3") {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          90,
          2
        ]
      ];
}

if (lines[2] !== "255") {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Canvas.ml",
          91,
          2
        ]
      ];
}

var canvas$2 = make(5, 3);

var c1 = Color.make(1.5, 0, 0);

var c2 = Color.make(0, 0, 0.5);

var c3 = Color.make(-0.5, 1, 0);

writePixel(canvas$2, 0, 0, c1);

writePixel(canvas$2, 2, 1, c2);

writePixel(canvas$2, 4, 2, c3);

var ppm$1 = toPpm(canvas$2);

var lines$1 = ppm$1.split("\n");

console.log(lines$1[3]);

console.log(lines$1[4]);

console.log(lines$1[5]);

writeToFile(canvas$2);

exports.make = make;
exports.writePixel = writePixel;
exports.pixelAt = pixelAt;
exports.toPpm = toPpm;
exports.writeToFile = writeToFile;
/* c Not a pure module */
