// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Float = require("./Float.bs.js");
var Tuple = require("./Tuple.bs.js");
var Matrix3D = require("./Matrix3D.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function makeUninitializedUnsafe(param) {
  var matrix = new Array(4);
  matrix[0] = new Array(4);
  matrix[1] = new Array(4);
  matrix[2] = new Array(4);
  matrix[3] = new Array(4);
  return matrix;
}

function getUnsafe(t, row, col) {
  return t[row][col];
}

function setUnsafe(t, x, row, col) {
  t[row][col] = x;
  return /* () */0;
}

var identityMatrix = /* array */[
  /* array */[
    1,
    0,
    0,
    0
  ],
  /* array */[
    0,
    1,
    0,
    0
  ],
  /* array */[
    0,
    0,
    1,
    0
  ],
  /* array */[
    0,
    0,
    0,
    1
  ]
];

function equals(matrix1, matrix2) {
  var _i = 0;
  var _j = 0;
  while(true) {
    var j = _j;
    var i = _i;
    if (i > 3) {
      return true;
    } else {
      var x = getUnsafe(matrix1, i, j);
      var y = getUnsafe(matrix2, i, j);
      if (Float.equals(x, y)) {
        if (j < 3) {
          _j = j + 1 | 0;
          continue ;
        } else {
          _j = 0;
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        return false;
      }
    }
  };
}

function multiply(m1, m2) {
  var m3 = makeUninitializedUnsafe(/* () */0);
  for(var row = 0; row <= 3; ++row){
    for(var col = 0; col <= 3; ++col){
      setUnsafe(m3, getUnsafe(m1, row, 0) * getUnsafe(m2, 0, col) + getUnsafe(m1, row, 1) * getUnsafe(m2, 1, col) + getUnsafe(m1, row, 2) * getUnsafe(m2, 2, col) + getUnsafe(m1, row, 3) * getUnsafe(m2, 3, col), row, col);
    }
  }
  return m3;
}

function multiplyTuple(m1, tuple) {
  return Tuple.makeTuple(getUnsafe(m1, 0, 0) * tuple.x + getUnsafe(m1, 0, 1) * tuple.y + getUnsafe(m1, 0, 2) * tuple.z + getUnsafe(m1, 0, 3) * tuple.w, getUnsafe(m1, 1, 0) * tuple.x + getUnsafe(m1, 1, 1) * tuple.y + getUnsafe(m1, 1, 2) * tuple.z + getUnsafe(m1, 1, 3) * tuple.w, getUnsafe(m1, 2, 0) * tuple.x + getUnsafe(m1, 2, 1) * tuple.y + getUnsafe(m1, 2, 2) * tuple.z + getUnsafe(m1, 2, 3) * tuple.w, getUnsafe(m1, 3, 0) * tuple.x + getUnsafe(m1, 3, 1) * tuple.y + getUnsafe(m1, 3, 2) * tuple.z + getUnsafe(m1, 3, 3) * tuple.w);
}

function transpose(matrix) {
  var m2 = new Array(4);
  m2[0] = new Array(4);
  m2[1] = new Array(4);
  m2[2] = new Array(4);
  m2[3] = new Array(4);
  for(var row = 0; row <= 3; ++row){
    for(var col = 0; col <= 3; ++col){
      setUnsafe(m2, getUnsafe(matrix, row, col), col, row);
    }
  }
  return m2;
}

function submatrix(m, row, col) {
  var subMatrix = Matrix3D.makeUninitializedUnsafe(/* () */0);
  for(var i = 0; i <= 3; ++i){
    for(var j = 0; j <= 3; ++j){
      if (!(i === row || j === col)) {
        var element = getUnsafe(m, i, j);
        var rowIx = i >= row ? i - 1 | 0 : i;
        var colIx = j >= col ? j - 1 | 0 : j;
        Matrix3D.setUnsafe(subMatrix, element, rowIx, colIx);
      }
      
    }
  }
  return subMatrix;
}

function minor(matrix, row, col) {
  return Matrix3D.determinant(submatrix(matrix, row, col));
}

function cofactor(matrix, row, col) {
  var m = minor(matrix, row, col);
  if ((row + col | 0) % 2 === 0) {
    return m;
  } else {
    return -1 * m;
  }
}

function determinant(matrix) {
  var a = getUnsafe(matrix, 0, 0);
  var b = getUnsafe(matrix, 0, 1);
  var c = getUnsafe(matrix, 0, 2);
  var d = getUnsafe(matrix, 0, 3);
  return a * cofactor(matrix, 0, 0) + b * cofactor(matrix, 0, 1) + c * cofactor(matrix, 0, 2) + d * cofactor(matrix, 0, 3);
}

function isInvertible(matrix) {
  return determinant(matrix) !== 0;
}

function inverseUnsafe(matrix) {
  if (determinant(matrix) === 0) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Matrix4D.ml",
            157,
            2
          ]
        ];
  }
  var d = determinant(matrix);
  var dest = makeUninitializedUnsafe(/* () */0);
  for(var row = 0; row <= 3; ++row){
    for(var col = 0; col <= 3; ++col){
      var c = cofactor(matrix, row, col);
      setUnsafe(dest, c / d, col, row);
    }
  }
  return dest;
}

var m = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    5.5,
    6.5,
    7.5,
    8.5
  ],
  /* array */[
    9,
    10,
    11,
    12
  ],
  /* array */[
    13.5,
    14.5,
    15.5,
    16.5
  ]
];

if (!Float.equals(getUnsafe(m, 0, 0), 1)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          183,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 0, 3), 4)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          184,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 1, 0), 5.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          185,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 1, 2), 7.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          186,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 2, 2), 11)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          187,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 3, 0), 13.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          188,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(m, 3, 2), 15.5)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          189,
          2
        ]
      ];
}

var m1 = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    5,
    6,
    7,
    8
  ],
  /* array */[
    9,
    8,
    7,
    6
  ],
  /* array */[
    5,
    4,
    3,
    2
  ]
];

var m2 = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    5,
    6,
    7,
    8
  ],
  /* array */[
    9,
    8,
    7,
    6
  ],
  /* array */[
    5,
    4,
    3,
    2
  ]
];

if (!equals(m1, m2)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          207,
          2
        ]
      ];
}

var m3 = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    5,
    6,
    7,
    8
  ],
  /* array */[
    9,
    8,
    7,
    6
  ],
  /* array */[
    5,
    4,
    3,
    2
  ]
];

var m4 = /* array */[
  /* array */[
    2,
    3,
    4,
    5
  ],
  /* array */[
    6,
    7,
    8,
    9
  ],
  /* array */[
    8,
    7,
    6,
    7
  ],
  /* array */[
    4,
    3,
    2,
    1
  ]
];

if (equals(m3, m4)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          223,
          2
        ]
      ];
}

var m1$1 = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    5,
    6,
    7,
    8
  ],
  /* array */[
    9,
    8,
    7,
    6
  ],
  /* array */[
    5,
    4,
    3,
    2
  ]
];

var m2$1 = /* array */[
  /* array */[
    -2,
    1,
    2,
    3
  ],
  /* array */[
    3,
    2,
    1,
    -1
  ],
  /* array */[
    4,
    3,
    6,
    5
  ],
  /* array */[
    1,
    2,
    7,
    8
  ]
];

var m3$1 = /* array */[
  /* array */[
    20,
    22,
    50,
    48
  ],
  /* array */[
    44,
    54,
    114,
    108
  ],
  /* array */[
    40,
    58,
    110,
    102
  ],
  /* array */[
    16,
    26,
    46,
    42
  ]
];

if (!equals(multiply(m1$1, m2$1), m3$1)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          248,
          2
        ]
      ];
}

var matrix = /* array */[
  /* array */[
    1,
    2,
    3,
    4
  ],
  /* array */[
    2,
    4,
    4,
    2
  ],
  /* array */[
    8,
    6,
    4,
    1
  ],
  /* array */[
    0,
    0,
    0,
    1
  ]
];

var b = Tuple.makeTuple(1, 2, 3, 1);

var c = Tuple.makeTuple(18, 24, 33, 1);

if (!Tuple.equals(multiplyTuple(matrix, b), c)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          264,
          2
        ]
      ];
}

var matrix$1 = /* array */[
  /* array */[
    0,
    1,
    2,
    4
  ],
  /* array */[
    1,
    2,
    4,
    8
  ],
  /* array */[
    2,
    4,
    8,
    16
  ],
  /* array */[
    4,
    8,
    16,
    32
  ]
];

if (!equals(multiply(matrix$1, identityMatrix), matrix$1)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          276,
          2
        ]
      ];
}

var a = Tuple.makeTuple(1, 2, 3, 4);

if (!Tuple.equals(multiplyTuple(identityMatrix, a), a)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          283,
          2
        ]
      ];
}

var m$1 = /* array */[
  /* array */[
    0,
    9,
    3,
    0
  ],
  /* array */[
    9,
    8,
    0,
    8
  ],
  /* array */[
    1,
    8,
    5,
    3
  ],
  /* array */[
    0,
    0,
    5,
    8
  ]
];

var transposed = /* array */[
  /* array */[
    0,
    9,
    1,
    0
  ],
  /* array */[
    9,
    8,
    8,
    0
  ],
  /* array */[
    3,
    0,
    5,
    5
  ],
  /* array */[
    0,
    8,
    3,
    8
  ]
];

if (!equals(transpose(m$1), transposed)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          302,
          2
        ]
      ];
}

if (!equals(transpose(identityMatrix), identityMatrix)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          305,
          2
        ]
      ];
}

var matrix$2 = /* array */[
  /* array */[
    -6,
    1,
    1,
    6
  ],
  /* array */[
    -8,
    5,
    8,
    6
  ],
  /* array */[
    -1,
    0,
    8,
    2
  ],
  /* array */[
    -7,
    1,
    -1,
    1
  ]
];

var subMatrix = /* array */[
  /* array */[
    -6,
    1,
    6
  ],
  /* array */[
    -8,
    8,
    6
  ],
  /* array */[
    -7,
    -1,
    1
  ]
];

if (!Matrix3D.equals(submatrix(matrix$2, 2, 1), subMatrix)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          319,
          2
        ]
      ];
}

var m$2 = /* array */[
  /* array */[
    -2,
    -8,
    3,
    5
  ],
  /* array */[
    -3,
    1,
    7,
    3
  ],
  /* array */[
    1,
    2,
    -9,
    6
  ],
  /* array */[
    -6,
    7,
    7,
    -9
  ]
];

if (!Float.equals(cofactor(m$2, 0, 0), 690)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          331,
          2
        ]
      ];
}

if (!Float.equals(cofactor(m$2, 0, 1), 447)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          332,
          2
        ]
      ];
}

if (!Float.equals(cofactor(m$2, 0, 2), 210)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          333,
          2
        ]
      ];
}

if (!Float.equals(cofactor(m$2, 0, 3), 51)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          334,
          2
        ]
      ];
}

if (!Float.equals(determinant(m$2), -4071)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          335,
          2
        ]
      ];
}

var matrix$3 = /* array */[
  /* array */[
    6,
    4,
    4,
    4,
    4
  ],
  /* array */[
    5,
    5,
    7,
    6
  ],
  /* array */[
    4,
    -9,
    3,
    -7
  ],
  /* array */[
    9,
    1,
    7,
    -6
  ]
];

if (!Float.equals(determinant(matrix$3), -2120)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          347,
          2
        ]
      ];
}

if (determinant(matrix$3) === 0) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          348,
          2
        ]
      ];
}

var matrix$4 = /* array */[
  /* array */[
    -4,
    2,
    -2,
    -3
  ],
  /* array */[
    9,
    6,
    2,
    6
  ],
  /* array */[
    0,
    -5,
    1,
    -5
  ],
  /* array */[
    0,
    0,
    0,
    0
  ]
];

if (!Float.equals(determinant(matrix$4), 0)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          360,
          2
        ]
      ];
}

if (determinant(matrix$4) !== 0) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          361,
          2
        ]
      ];
}

var a$1 = /* array */[
  /* array */[
    -5,
    2,
    6,
    -8
  ],
  /* array */[
    1,
    -5,
    1,
    8
  ],
  /* array */[
    7,
    7,
    -6,
    -7
  ],
  /* array */[
    1,
    -3,
    7,
    4
  ]
];

var b$1 = inverseUnsafe(a$1);

if (!Float.equals(determinant(a$1), 532)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          375,
          2
        ]
      ];
}

if (!Float.equals(cofactor(a$1, 2, 3), -160)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          376,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(b$1, 3, 2), -160 / 532)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          377,
          2
        ]
      ];
}

if (!Float.equals(cofactor(a$1, 3, 2), 105)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          378,
          2
        ]
      ];
}

if (!Float.equals(getUnsafe(b$1, 2, 3), 105 / 532)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          379,
          2
        ]
      ];
}

if (!equals(b$1, /* array */[
        /* array */[
          0.21805,
          0.45113,
          0.24060,
          -0.04511
        ],
        /* array */[
          -0.80827,
          -1.45677,
          -0.44361,
          0.52068
        ],
        /* array */[
          -0.07895,
          -0.22368,
          -0.05263,
          0.19737
        ],
        /* array */[
          -0.52256,
          -0.81391,
          -0.30075,
          0.30639
        ]
      ])) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          381,
          2
        ]
      ];
}

var matrix$5 = /* array */[
  /* array */[
    8,
    -5,
    9,
    2
  ],
  /* array */[
    7,
    5,
    6,
    1
  ],
  /* array */[
    -6,
    0,
    9,
    6
  ],
  /* array */[
    -3,
    0,
    -9,
    -4
  ]
];

if (!equals(inverseUnsafe(matrix$5), /* array */[
        /* array */[
          -0.15385,
          -0.15385,
          -0.28205,
          -0.53846
        ],
        /* array */[
          -0.07692,
          0.12308,
          0.02564,
          0.03077
        ],
        /* array */[
          0.35897,
          0.35897,
          0.43590,
          0.92308
        ],
        /* array */[
          -0.69231,
          -0.69231,
          -0.76923,
          -1.92308
        ]
      ])) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          401,
          2
        ]
      ];
}

var matrix$6 = /* array */[
  /* array */[
    9,
    3,
    0,
    9
  ],
  /* array */[
    -5,
    -2,
    -6,
    -3
  ],
  /* array */[
    -4,
    9,
    6,
    4
  ],
  /* array */[
    -7,
    6,
    6,
    2
  ]
];

if (!equals(inverseUnsafe(matrix$6), /* array */[
        /* array */[
          -0.04074,
          -0.07778,
          0.14444,
          -0.22222
        ],
        /* array */[
          -0.07778,
          0.03333,
          0.36667,
          -0.33333
        ],
        /* array */[
          -0.02901,
          -0.14630,
          -0.10926,
          0.12963
        ],
        /* array */[
          0.17778,
          0.06667,
          -0.26667,
          0.33333
        ]
      ])) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          421,
          2
        ]
      ];
}

var a$2 = /* array */[
  /* array */[
    3,
    -9,
    7,
    3
  ],
  /* array */[
    3,
    -8,
    2,
    -9
  ],
  /* array */[
    -4,
    4,
    4,
    1
  ],
  /* array */[
    -6,
    5,
    -1,
    1
  ]
];

var b$2 = /* array */[
  /* array */[
    8,
    2,
    2,
    2
  ],
  /* array */[
    3,
    -1,
    7,
    0
  ],
  /* array */[
    7,
    0,
    5,
    4
  ],
  /* array */[
    6,
    -2,
    0,
    5
  ]
];

var c$1 = multiply(a$2, b$2);

if (!equals(multiply(c$1, inverseUnsafe(b$2)), a$2)) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "Matrix4D.ml",
          449,
          2
        ]
      ];
}

exports.makeUninitializedUnsafe = makeUninitializedUnsafe;
exports.getUnsafe = getUnsafe;
exports.setUnsafe = setUnsafe;
exports.identityMatrix = identityMatrix;
exports.equals = equals;
exports.multiply = multiply;
exports.multiplyTuple = multiplyTuple;
exports.transpose = transpose;
exports.submatrix = submatrix;
exports.minor = minor;
exports.cofactor = cofactor;
exports.determinant = determinant;
exports.isInvertible = isInvertible;
exports.inverseUnsafe = inverseUnsafe;
/*  Not a pure module */
